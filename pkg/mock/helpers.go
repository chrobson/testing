// SPDX-FileCopyrightText: (c) 2025 Rafal Zajac <rzajac@gmail.com>
// SPDX-License-Identifier: MIT

package mock

import (
	"fmt"
	"path/filepath"
	"reflect"
	"runtime"
	"strings"
	"unicode"
	"unicode/utf8"
)

// callStack returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
//
// Copied from: https://github.com/stretchr/testify/blob/5ac6528bffc1ed7557980c3c563caf8308568446/assert/assertions.go#L214
func callStack() []string {
	var pc uintptr
	var ok bool
	var file string
	var line int
	var name string

	callers := make([]string, 0, 10)
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			// The breaks below failed to terminate the loop,
			// and we ran off the end of the call stack.
			break
		}

		// This is a huge edge case,
		// but it will panic if this is the case, see #180
		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// The testing.tRunner is the standard library function that calls
		// tests. Subtests are called directly by tRunner, without going
		// through the Test/Benchmark/Example function that contains the t.Run
		// calls, so with subtests we should break when we hit tRunner, without
		// adding it to the list of callers.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		file = parts[len(parts)-1]
		if len(parts) > 1 {
			path, _ := filepath.Abs(file)
			callers = append(callers, fmt.Sprintf("%s:%d", path, line))
		}

		// Drop the package.
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if isTestName(name, "Test") ||
			isTestName(name, "Benchmark") ||
			isTestName(name, "Example") {
			break
		}
	}

	return callers
}

// formatMethod returns formated string representing the method and its input
// and return arguments.
func formatMethod(method string, args, rets Arguments) string {
	var out []string
	argsStr := args.String(-1)
	retsStr := rets.String(-1)
	if len(rets) > 1 {
		retsStr = "(" + retsStr + ")"
	}
	if len(rets) > 0 {
		retsStr = " " + retsStr
	}
	out = append(out, fmt.Sprintf("%s(%s)%s", method, argsStr, retsStr))
	return strings.Join(out, "\n")
}

// formatArgs returns formated multi-line string representing arguments. Uses
// internal [dump.Dump].
func formatArgs(args Arguments) string {
	if len(args) == 0 {
		return ""
	}
	var out []string
	for idx, arg := range args {
		out = append(out, fmt.Sprintf("%d: %s", idx, dumper.Any(arg)))
	}
	return strings.Join(out, "\n")
}

// isTestName checks if the given name starts with the provided prefix (e.g.,
// "Test", "Benchmark", or "Example") and is followed by an uppercase letter or
// non-letter character, indicating it is a valid test function. It returns
// true if the name matches this pattern; otherwise, it returns false.
//
// Copied from: go/src/cmd/go/internal/load/test.go:617
func isTestName(name, prefix string) bool {
	if !strings.HasPrefix(name, prefix) {
		return false
	}
	if len(name) == len(prefix) { // "Test" is ok.
		return true
	}
	r, _ := utf8.DecodeRuneInString(name[len(prefix):])
	return !unicode.IsLower(r)
}

// methodName returns method name.
//
// Copied from:	https://github.com/emicklei/go-restful/blob/1959514610d2124125005c8a6a3962d6cca32a16/route_builder.go#L375
//
// Example:
//
//	ptr := &types.TPtr{}
//	met := reflect.ValueOf(ptr.AAA)
//	methodName(met)
func methodName(met reflect.Value) string {
	fun := runtime.FuncForPC(met.Pointer())
	name := fun.Name()
	tokenized := strings.Split(name, ".")
	last := tokenized[len(tokenized)-1]
	last = strings.TrimSuffix(last, ")·fm") // < Go 1.5
	last = strings.TrimSuffix(last, ")-fm") // Go 1.5
	last = strings.TrimSuffix(last, "·fm")  // < Go 1.5
	last = strings.TrimSuffix(last, "-fm")  // Go 1.5
	return last
}

// twoColumns aligns the text in the second column to the longest string in the
// first column. Stores the result in the first column.
//
// Example:
//
//	aaa 111
//	bb  222
//	c   333
func twoColumns(col1, col2 []string) {
	var longest int
	for _, s := range col1 {
		if len(s) > longest {
			longest = len(s)
		}
	}
	for i, s := range col2 {
		ind := strings.Repeat(" ", longest-len(col1[i]))
		col1[i] = fmt.Sprintf("%s %s-> %s", col1[i], ind, s)
	}
}
