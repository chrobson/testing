Mock for the Case53 interface in mocker/testdata/cases package.
---
package golden

// Code generated by mocker. DO NOT EDIT.

import (
	"github.com/ctx42/testing/pkg/mock"
	"github.com/ctx42/testing/pkg/tester"
)

type Case53 struct {
	*mock.Mock
	t tester.T
}

func NewCase53(t tester.T) *Case53 {
	t.Helper()
	return &Case53{Mock: mock.NewMock(t), t: t}
}

func (_mck *Case53) Method53(a int, b bool) (int, bool, string, error) {
	_mck.t.Helper()
	_args := []any{a, b}
	_rets := _mck.Called(_args...)
	if len(_rets) != 4 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 int
	if _rFn, ok := _rets.Get(0).(func(int, bool) int); ok {
		_r0 = _rFn(a, b)
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(int)
	}
	var _r1 bool
	if _rFn, ok := _rets.Get(1).(func(int, bool) bool); ok {
		_r1 = _rFn(a, b)
	} else if _r := _rets.Get(1); _r != nil {
		_r1 = _r.(bool)
	}
	var _r2 string
	if _rFn, ok := _rets.Get(2).(func(int, bool) string); ok {
		_r2 = _rFn(a, b)
	} else if _r := _rets.Get(2); _r != nil {
		_r2 = _r.(string)
	}
	var _r3 error
	if _rFn, ok := _rets.Get(3).(func(int, bool) error); ok {
		_r3 = _rFn(a, b)
	} else if _r := _rets.Get(3); _r != nil {
		_r3 = _r.(error)
	}
	return _r0, _r1, _r2, _r3
}
