package iokit

// Code generated by mocker. DO NOT EDIT.

import (
	"github.com/ctx42/testing/pkg/mock"
	"github.com/ctx42/testing/pkg/tester"
)

type ReadSeekerMock struct {
	*mock.Mock
	t tester.T
}

func NewReadSeekerMock(t tester.T) *ReadSeekerMock {
	t.Helper()
	return &ReadSeekerMock{Mock: mock.NewMock(t), t: t}
}

func (_mck *ReadSeekerMock) Read(p []byte) (int, error) {
	_mck.t.Helper()
	_args := []any{p}
	_rets := _mck.Called(_args...)
	if len(_rets) != 2 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 int
	if _rFn, ok := _rets.Get(0).(func([]byte) int); ok {
		_r0 = _rFn(p)
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(int)
	}
	var _r1 error
	if _rFn, ok := _rets.Get(1).(func([]byte) error); ok {
		_r1 = _rFn(p)
	} else if _r := _rets.Get(1); _r != nil {
		_r1 = _r.(error)
	}
	return _r0, _r1
}

func (_mck *ReadSeekerMock) OnRead(p any) *mock.Call {
	_mck.t.Helper()
	_args := []any{p}
	return _mck.On("Read", _args...)
}

func (_mck *ReadSeekerMock) Seek(offset int64, whence int) (int64, error) {
	_mck.t.Helper()
	_args := []any{offset, whence}
	_rets := _mck.Called(_args...)
	if len(_rets) != 2 {
		_mck.t.Fatal("the number of mocked method returns does not match")
	}

	var _r0 int64
	if _rFn, ok := _rets.Get(0).(func(int64, int) int64); ok {
		_r0 = _rFn(offset, whence)
	} else if _r := _rets.Get(0); _r != nil {
		_r0 = _r.(int64)
	}
	var _r1 error
	if _rFn, ok := _rets.Get(1).(func(int64, int) error); ok {
		_r1 = _rFn(offset, whence)
	} else if _r := _rets.Get(1); _r != nil {
		_r1 = _r.(error)
	}
	return _r0, _r1
}

func (_mck *ReadSeekerMock) OnSeek(offset any, whence any) *mock.Call {
	_mck.t.Helper()
	_args := []any{offset, whence}
	return _mck.On("Seek", _args...)
}
